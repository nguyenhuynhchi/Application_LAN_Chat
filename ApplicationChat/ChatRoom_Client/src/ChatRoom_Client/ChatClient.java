package ChatRoom_Client;

import View.V_FrmChat_Client;
import View.V_FrmUserAccess;
import java.io.OutputStream;
import java.net.Socket;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author Nguyen Huynh Chi
 */
public class ChatClient {

    private static final String URL = "localhost";
    private int port;

    private static ChatClient instance;
    private V_FrmChat_Client vFC;
    private V_FrmUserAccess vFU;
    public String clientName;
    public String clientID;
    public String password;
    public boolean connect;

    private Socket socket;
//    private Socket chatSocket;
    private MessageSender messageSender;
    private Client_Listener client_Listener;

    public Map<String, List<String>> listGroups = new HashMap<>();

    public ChatClient(V_FrmChat_Client vFC) {
        this.vFC = vFC;
    }

    public static synchronized ChatClient getInstance(V_FrmChat_Client vFC) {
        if (instance == null) {
            instance = new ChatClient(vFC);
        }
        return instance;
    }

    public void StartClient() {
        try {
            clientName = vFC.userName;
            clientID = vFC.ID;
            password = vFC.password;
            port = vFC.port;
            

            socket = new Socket(URL, port); // C·ªïng 5000

            System.out.println("Connected to server");

            System.out.println("Name(ID) c·ªßa b·∫°n: " + clientName + "(" + clientID + ")");

            // G·ª≠i t√™n c·ªßa ch√≠nh client l√™n server
//            OutputStream InfoOutput = socket.getOutputStream();
//            InfoOutput.write(("InfoNewClients|" + clientName + "|" + clientID + "\n").getBytes());

            // T·∫°o v√† kh·ªüi ch·∫°y thread cho chatInfo_Listener ƒë·ªÉ nh·∫≠n th√¥ng tin c√°c client t·ª´ server g·ª≠i v·ªÅ
            client_Listener = new Client_Listener(socket, vFC);
            new Thread(client_Listener).start();

            // T·∫°o v√† kh·ªüi ch·∫°y thread cho MessageSender ƒë·ªÉ g·ª≠i c√°c th√¥ng tin ƒë·∫øn server
            messageSender = new MessageSender(socket, vFC);
            new Thread(messageSender).start();
            
            messageSender.setClientName(clientName);
            messageSender.setClientID(clientID);
            
            messageSender.sendInfo(clientName, clientID, password); // g·ª≠i th√¥ng tin ƒëƒÉng nh·∫≠p v·ªÅ server
            
            connect = true; //Ki·ªÉm tra k·∫øt n·ªëi th√†nh c√¥ng th√¨ kh√¥ng hi·ªán panel th√¥ng b√°o
        } catch (java.net.ConnectException e) {
            System.out.println("L·ªói: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra server v√† th·ª≠ l·∫°i.");
            connect = false; //Ki·ªÉm tra k·∫øt n·ªëi kh√¥ng th√†nh c√¥ng th√¨ hi·ªán panel th√¥ng b√°o
        } catch (Exception e) {
            System.err.println("L·ªói ·ªü chatClient ");
            e.printStackTrace();
            connect = false; //Ki·ªÉm tra k·∫øt n·ªëi kh√¥ng th√†nh c√¥ng th√¨ hi·ªán panel th√¥ng b√°o
        }
        vFC.hienThongBaoKetNoi(connect);
    }

    public synchronized void createGroup(String groupName, String quantityInGroup, List<String> clientsInGroup) {
        listGroups.put(groupName, clientsInGroup);
        System.out.println("\nüîî B·∫°n v·ª´a ƒë∆∞·ª£c th√™m v√†o nh√≥m '" + groupName + "', v·ªõi " + quantityInGroup + " th√†nh vi√™n: ");
        for (String clients : clientsInGroup) {
            System.out.println(clients);
        }
        vFC.addGroupToList(groupName, quantityInGroup);
        System.out.println("Danh s√°ch nh√≥m c√≥ b·∫°n l√† th√†nh vi√™n: " + listGroups);
        vFC.addMessage("\nüîî B·∫°n v·ª´a ƒë∆∞·ª£c th√™m v√†o nh√≥m '" + groupName + "', v·ªõi " + quantityInGroup + " th√†nh vi√™n: ", "in");
    }

    public List<String> getClientsInGroup(String groupName) {
        if (!listGroups.containsKey(groupName)) {
            System.out.println("Nh√≥m '" + groupName + "' kh√¥ng t·ªìn t·∫°i trong HashMap");
        }
        return listGroups.getOrDefault(groupName, Collections.emptyList());
    }
}
